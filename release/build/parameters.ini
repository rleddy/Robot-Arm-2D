


#some defaults
# A default communication channel. But, actaully, there are many communication channels.
TCP_PORT: 20000
IP_ADDR: 192.168.0.1

# something that tells us how much space to allocate. An upper limit on devices for this configuration.

MOTOR_COUNT: 3
SENSOR_COUNT: 1


# Two joint, One coupler application.
drive_count: 2
port_ready_delay: 5

run_mode: command
SIMULATION: no
TCP_WITH_SIMULATION: yes


#centimeters

CANISTER_RADIUS: 5.0
ARM_1_length: 12.375
ARM_2_length: 10.0

CANISTER_STEP: 20000
ELBOW_STEP: 20000


MIN_RADIUS: 8.0


FIELD_RANGE_FACTOR: 2.5
FIELD_ARC_PARTITIONS: 10


TEST_POSITIONS: 15.3,4.4 14.5,9.9 10.1,8.4


# (M) or (m) is for motor

(m)power[1]: 5
(m)gear_ratio[1]: 5

(m)power[2]: 4
(m)gear_ratio[2]: 1


# get parameters for power up setting. 1
(m)read_power_up[1]: {
	SC
	SP
	VE
	AC
	JS
	DE
}


(m)read_power_up[2]: {
	SC
	SP
	VE
	AC
	JS
	DE
}


#vars processed before add_parameters is called.
	#JD

(m)set_run_parameters[1]: {
	SP{CANISTER_STEPS}
	VE0.25
	AC3
	DE400
	JS10
}


# get parameters for power up setting. 2
	#JD

(m)set_run_parameters[2]: {
	SP{ELBOW_STEPS}
	VE0.06
	AC3
	DE200
	JS4
}


(m)read_reset[1]: {
	SC
	SP
	VE
	AC
}


(m)read_reset[2]: {
	SC
	SP
	VE
	AC
}



(m)single_motion_A[1]: {
	FL10000
}


(m)single_motion_A[2]: {
	VE2
	FL10000
	VE10
	FL-10000
}



(m)single_motion_var[1]: {
	ST
	FP{STEPS}
}


(m)single_motion_var[2]: {
	ST
	VE
	FP{STEPS}
}



(m)single_motion_start[1]: {
	ST
	VE
	SP{STEPS}
}


(m)single_motion_start[2]: {
	ST
	SP{STEPS}
}



# CJ with CS commands or use a sequence of FL of FP commands, which would run until some pattern hits.
(m)scan_jog_action[1]: {
	JS1.0
	CJ
}


# CJ with CS commands or use a sequence of FL of FP commands, which would run until some pattern hits.
(m)scan_jog_action[2]: {
	JS1.0
	CJ
}


#--------------------->>
# if jogging do an SJ ...
(m)stop_motion[1]: {
	SJ
	ST
}


# if jogging do an SJ ...
(m)stop_motion[2]: {
	SJ
	ST
}
#--------------------->>




##----------->>
(m)rotation_query[1]: {
	SP
}


(m)rotation_query[2]: {
	SP
}



# One sensor is the camera
(s)camera[1]: {
	#
	focus: 3
	fov_w: 640
	fov_h: 480
	#
	scale_x: 4.5
	scale_y: 3.0
	#
	model: P4
	address: 192.168.0.1
	connect: multiport
	base_port: 20000
	port_count: 10;
	#
}




# A description of a goal
(t)definition[1]: {
	#
	source: camera[1]
	# let me know what the pattern is
	id: goal
	level: 6
	# data
	inspection: goal.ins
	report_id: MT_1
	fields: x, y, angle, center, radius, theta

	offset_total(x,y): 3,4
	goal_offset: 0.0,0.0

	port_type: IP
	port: 20000
}




#center offsets
(t)definition[2]: {
	#
	level: 1
	source: camera[1]
	# let me know what the pattern is
	id: alpha_W
	# data
	inspection: feduciary1.ins
	report_id: PC_1
	fields: center, angle, match
	#---------
	offset_total(x,y): -1.5,1.0

	port_type: IP
	port: 20000

	travel_next: alpha_Q
	travel_offset: -1.5,1.0

	goal_offset: -1.5,2.0

}




#center offsets
(t)definition[3]: {
	#
	source: camera[1]
	# let me know what the pattern is
	id: alpha_A
	level: 1
	# data
	inspection: feduciary1.ins
	report_id: GC_1
	fields: center, angle, match
	#---------
	offset_total(x,y): 1.5,1.0


	port_type: IP
	port: 20001

	travel_next: alpha_Q
	travel_offset: 1.5,1.0

	goal_offset: 2.5,2.0

}




#center offsets
(t)definition[4]: {
	#
	source: camera[1]
	# let me know what the pattern is
	id: alpha_Q
	level: 1
	# data
	inspection: feduciary1.ins
	report_id: GC_2
	fields: center, angle, match
	#---------
	offset_total(x,y): 3.0,1.0

	port_type: IP
	port: 20001

	travel_next: alpha_R
	travel_offset: 3.0,0.0

	goal_offset: 2.75,2.5

}



